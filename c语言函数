#define  _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include <math.h>
//int main()
//{
//	int i = 0;
//	for (i = 1; i <= 999; i++)
//	{
//		int sum = 0;
//		int n = 0;
//		int tmp = i;
//		while (tmp != 0)
//		{
//			n++;
//			tmp /= 10;//计算i的位数n，
//		}
//		tmp = i;//需要提前赋值
//		while (tmp != 0)
//		{
//			sum += (int)pow(tmp%10, n);
//				tmp /= 10;
//		}
//		if (sum == i)
//		{
//			printf("%d ", i);
//		}
//	}
//	return 0;
//
//}
//int main()
//{
//	int n = 0;//数列的个数
//	int a = 0;//元素值
//	int i = 0;
//	int sum = 0;
//	int k = 0;
//	scanf("%d", &n);
//	scanf("%d", &a);
//	for (i = 0; i <= n; i++)
//	{
//
//		 k = k*10 + a;//创建变量k，让值进行叠加
//		 sum += k;
//	}
//	printf("%d ", sum);
//	return 0;
//}
//int get_max(int x, int y)//自定义函数
//{
//	return((x > y) ? (x) : (y));
//}
//int main()
//{
//	int sum1 = 1;
//	int sum2 = 0;
//	int max = get_max(sum1, sum2);//调用自定义函数
//	printf("max=%d", max);
//	return 0;
//}
//void get_swop(int *px,int *py)//xy的类型需要定义为指针，存储地址。
//{//指针在32位中大小为4个字节，64位中为8字节
//	int  tmp = 0;
//	tmp = *px;
//	*px = *py;
//	*py = tmp;
//}
//int main()
//{
//	int a = 1;
//	int b = 2;
//	get_swop(&a,&b);//实参需要传送地址给形参
//	printf("%d %d", a,b);//形参相当于实参的临时拷贝，对形参修改不对实参改变，需要改变时需要传送地址
//	return 0;
//}
//int is_prime(int x)
//{
//	int i = 0;
//	for (i = 2; i < x; i++)
//	{
//		if (x%i == 0)
//		{
//			return 0;
//		}
//	}
//	return 1;
//}
//int main()
//{
//	int i = 0;
//	for (i = 1; i < 9; i++);
//	{
//		if (is_prime(i) == 1);
//		{
//			printf("%d ", i);
//		}
//	}
//	return 0;
//}
//int is_prime(int n)
//{
//	int i = 0;
//	for (i = 2; i < n; i++)
//	{
//		if (n%i == 0)
//		{
//			return 0;
//		}
//	}
//	return 1;
//}
//int main()
//{
//	int i = 0;
//	for (i = 1; i <= 9; i++)
//	{
//		if (is_prime(i) == 1)
//		{
//			printf("%d ", i);
//		}
//	}
//	return 0;
//}
//int is_leap(int n)//判断闰年
//{
//	if (n % 4 == 0 && n % 100 != 0)
//	{
//		return 1;
//	}
//	if (n % 400 == 0)
//	{
//		return 1;
//	}
//	return 0; 
//}
//int main()
//{
//	int i = 0;
//	for (i = 1000; i <= 2000; i++)
//		if (is_leap(i) == 1)
//		{
//			printf("%d ", i);
//		}
//	return 0;
//}
//int binary_search(int arr[], int n, int sz)//二分查找
//{
//	int left = 0;
//	int right = sz - 1;
//	while (left <= right)//当左值小于等于右值时，循环进行
//	{
//		int mid = (left + right) / 2;//变量需要定义在循环内部，可以接收返回值
//		if (arr[mid] > n)
//		{
//			right = mid - 1;
//		}
//		else if (arr[mid] < n)
//		{
//			left = mid + 1;
//		}
//		else
//			return mid;
//	}
//	return 0;
//}
//int main()
//{
//	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//	int k = 7;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int ret = binary_search(arr, k, sz);
//	printf("找到了，下标是 ret = %d\n", ret);
//	return 0;
//}
//void Add(int *p)//调用一次增加1，需要传递实参的地址给形参
//{
//	(*p)++;
//}
//int main()
//{
//	int sum = 0;
//	Add(&sum);
//	printf("%d\n", sum);
//	Add(&sum);
//	printf("%d\n", sum);
//	return 0;
//}
